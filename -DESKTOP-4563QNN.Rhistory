variance_plots <- lapply(names(pca_list), function(pca_name) {
generate_variance_plot(pca_list[[pca_name]], pca_name)
})
grid.arrange(grobs = variance_plots, ncol = 3)
db_resurv_RS_short %>% filter(EUNISa_1 == "T" & RS_data == T) %>%
ggplot(aes(x = factor(year), y = NDVI, fill = biogeo)) +
geom_boxplot(outlier.shape = NA)
db_resurv_RS_short %>% filter(EUNISa_1 == "R" & RS_data == T) %>%
ggplot(aes(x = factor(year), y = NDVI, fill = biogeo)) +
geom_boxplot(outlier.shape = NA)
# st_write(db_resurv_RS_short %>% filter(!is.na(Lon_updated)) %>%
#   st_as_sf(coords = c("Lon_updated", "Lat_updated"), crs = 4326),
#   here("..", "..", "..", "GIS", "shapefiles", "db_resurv_RS_short.shp"))
db_resurv_RS_short %>%
mutate(loc_uncertainty = ifelse(is.na(`Location uncertainty (m)`), "N", "Y")) %>%
ggplot(aes(x = loc_uncertainty)) + geom_bar()
db_resurv_RS_short %>%
filter(!is.na(`Location uncertainty (m)`)) %>%
ggplot(aes(x = `Location uncertainty (m)`)) + geom_histogram()
db_resurv_RS_short %>%
filter(`Location uncertainty (m)` < 200) %>%
ggplot(aes(x = `Location uncertainty (m)`)) + geom_histogram()
db_resurv_RS_short %>%
filter(`Location uncertainty (m)` < 20) %>%
ggplot(aes(x = `Location uncertainty (m)`)) + geom_histogram()
ggplot(data = db_resurv_RS_short %>%
filter(`Location uncertainty (m)` < 20) %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDVI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDVI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDVI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDVI_20.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(`Location uncertainty (m)` < 20) %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDMI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDMI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDMI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDMI_20.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(`Location uncertainty (m)` < 5) %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDVI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDVI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDVI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDVI_5.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(`Location uncertainty (m)` < 5) %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDMI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDMI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDMI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDMI_5.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(`Location method` == "Location with differential GPS") %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDVI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDVI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDVI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDVI_differential_GPS.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(`Location method` == "Location with differential GPS") %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDMI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDMI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDMI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDMI_differential_GPS.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(`Location method` == "Location with GPS" |
`Location method` == "Location with differential GPS") %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDVI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDVI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDVI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDVI_GPS.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(`Location method` == "Location with GPS" |
`Location method` == "Location with differential GPS") %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)),
aes(x = EUNISa_1_descr, y = NDMI, fill = EUNISa_1_descr)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = NDMI, color = EUNISa_1_descr),
position = position_jitter(width = 0.15), size = 1, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
labs(y = "NDMI", x = "EUNISa_1_descr") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip()
ggsave(
here("output", "figures", "NDMI_GPS.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)) %>%
filter(EUNISa_1 %in% c("T", "R", "S", "Q", "N")) %>%
mutate(
Location_uncertainty_range = factor(
case_when(
`Location uncertainty (m)` <= 30 ~ "0 – 30 m",
`Location uncertainty (m)` <= 200 ~ "30 m – 200 m",
is.na(`Location uncertainty (m)`) ~ "NA",
TRUE ~ "200 m +"
),
levels = c("0 – 30 m", "30 m – 200 m", "200 m +", "NA"))
),
aes(x = Location_uncertainty_range, y = NDVI, fill = Location_uncertainty_range)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.5) +
geom_point(aes(y = NDVI, color = Location_uncertainty_range),
position = position_jitterdodge(jitter.width = 0.5,
dodge.width = 0.25),
size = 0.5, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5,
position = position_dodge(width = 0.25)) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1,
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5,
position = position_dodge(width = 0.25)) +
labs(y = "NDVI", x = "Location uncertainty") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip() + facet_wrap(~ EUNISa_1_descr, nrow = 2)
ggsave(
here("output", "figures", "NDVI_comp_unc_range.tiff"),
width = 29.7, height = 21, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
mutate(GPS = ifelse(
`Location method` == "Location with GPS" |
`Location method` == "Location with differential GPS",
"Y", "N")) %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)) %>%
filter(EUNISa_1 %in% c("T", "R", "S", "Q", "N")),
aes(x = GPS, y = NDVI, fill = GPS)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.5) +
geom_point(aes(y = NDVI, color = GPS),
position = position_jitterdodge(jitter.width = 0.25,
dodge.width = 0.25),
size = 0.5, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5,
position = position_dodge(width = 0.25)) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1,
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5,
position = position_dodge(width = 0.25)) +
labs(y = "NDVI", x = "GPS") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip() + facet_wrap(~ EUNISa_1_descr, nrow = 2)
ggsave(
here("output", "figures", "NDVI_comp_GPS.tiff"),
width = 29.7, height = 21, units = "cm", dpi = 300)
ggplot(data = db_resurv_RS_short %>%
mutate(GPS = ifelse(
`Location method` == "Location with differential GPS",
"Differential GPS",
ifelse(`Location method` == "Location with GPS", "GPS",
"No GPS"))) %>%
filter(RS_data == T & !is.na(EUNISa_1_descr)) %>%
filter(EUNISa_1 %in% c("T", "R", "S", "Q", "N")),
aes(x = GPS, y = NDVI, fill = GPS)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.5) +
geom_point(aes(y = NDVI, color = GPS),
position = position_jitterdodge(jitter.width = 0.25,
dodge.width = 0.25),
size = 0.5, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5,
position = position_dodge(width = 0.25)) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 1,
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5,
position = position_dodge(width = 0.25)) +
labs(y = "NDVI", x = "GPS") +
guides(fill = FALSE, color = FALSE) +
theme_bw() + coord_flip() + facet_wrap(~ EUNISa_1_descr, nrow = 2)
ggsave(
here("output", "figures", "NDVI_comp_GPS_diff.tiff"),
width = 29.7, height = 21, units = "cm", dpi = 300)
points_SONATA <- db_resurv_RS_short %>%
filter(`Location uncertainty (m)` < 50 & RS_data == T &
!is.na(EUNISa_1_descr) & Lon_diff == F & Lat_diff == F) %>%
group_by(RS_CODE, `ReSurvey site`, `ReSurvey plot`) %>%
mutate(max_year = max(year)) %>%
filter(year == max_year) %>%
# In some cases there is more than one row per group,
# i.e. more than one row for the last year
slice_sample(n = 1) %>%
ungroup() %>%
select(-max_year, -year_RS, -source, -Lon_RS, -Lat_RS, -RS_data, -year_diff,
-Lon_diff, -Lat_diff)
# Load world boundaries
world <- ne_countries(scale = "medium", returnclass = "sf")
# Calculate the extent of the points
extent <- points_SONATA %>%
summarise(
lon_min = min(Lon_updated, na.rm = TRUE),
lon_max = max(Lon_updated, na.rm = TRUE),
lat_min = min(Lat_updated, na.rm = TRUE),
lat_max = max(Lat_updated, na.rm = TRUE)
)
# Add padding to the extent (adjust as needed)
padding <- 0.5  # Adjust padding to your preference
x_limits <- c(extent$lon_min - padding, extent$lon_max + padding)
y_limits <- c(extent$lat_min - padding, extent$lat_max + padding)
# Compute centroids for labeling
world_centroids <- world %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(lon = st_coordinates(centroid)[, 1],
lat = st_coordinates(centroid)[, 2])
# Create the zoomed map
ggplot() +
geom_sf(data = world, fill = "lightblue", color = "gray") +
geom_point(data = points_SONATA %>%
filter(`Location uncertainty (m)` < 50),
aes(x = Lon_updated, y = Lat_updated, color = Country),
size = 2) +
geom_text(data = world_centroids,
aes(x = lon, y = lat, label = sovereignt),
size = 3, color = "black") +  # Adjust size and color as needed
coord_sf(xlim = x_limits, ylim = y_limits) +
theme_minimal()
write_tsv(points_SONATA,here("data", "clean","points_SONATA.csv"))
cordi1 <- read_excel(
here("data", "edited","NDVI_NDMI_Pastizales_Bosques 2_AV.xlsx"),
sheet = "pastizal_AV") %>%
rename(id = "Releve_num") %>% mutate(id = as.character(id))
cordi2 <- read_excel(
here("data", "edited","NDVI_NDMI_Pastizales_Bosques_AV.xlsx"),
sheet = "bosque_AV") %>%
rename(id = "Plot_ID")
cordi <- bind_rows(cordi1, cordi2) %>% select(-date, -mes) %>%
group_by(id) %>%
summarise(max_NDVI = max(NDVI, na.rm = TRUE),
max_NDMI = max(NDMI, na.rm = TRUE))
alpine_grasslands <- st_read(
here("..", "..", "..", "GIS", "shapefiles", "EVEREST",
"AlpineGrasslands_WGS84.shp")) %>%
rename(id = "Releve_num", hab = "Hábitat") %>% select (id, hab) %>% as_tibble() %>%
mutate(id = as.character(id))
vegetation_types <- st_read(
here("..", "..", "..", "GIS", "shapefiles", "EVEREST",
"VegetationTypes_WGS84.shp")) %>%
rename(id = "Plot_ID", hab = "Vegetation") %>% select(id, hab) %>% as_tibble()
habitats <- bind_rows(alpine_grasslands, vegetation_types)
cordi <- habitats %>%
left_join(cordi)
cordi %>% distinct(hab)
cordi <- cordi %>%
mutate(EUNIS_1 = case_when(hab = str_detect(hab, "Pastizal|Cervunal|grassland|meadow") ~ "R",
hab = str_detect(hab, "forest") ~ "T",
hab = str_detect(hab, "Scrub|scrub|Shrubland|shrubland|shrub|Heathland") ~ "S",
hab = str_detect(hab, "Suelo") ~ "U",
TRUE ~ NA_character_))
ggplot(data = cordi %>% filter(!is.na(max_NDVI)),
aes(x = EUNIS_1, y = max_NDVI, fill = EUNIS_1)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = max_NDVI, color = EUNIS_1),
position = position_jitter(width = 0.15), size = 3,
alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 3) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
guides(fill = FALSE, color = FALSE) + theme_bw() + coord_flip()
ggsave(here("output", "figures", "cordi_NDVI.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
ggplot(data = cordi %>% filter(!is.na(max_NDMI)),
aes(x = EUNIS_1, y = max_NDMI, fill = EUNIS_1)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(aes(y = max_NDMI, color = EUNIS_1),
position = position_jitter(width = 0.15), size = 3,
alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
stat_summary(fun.y=mean, geom="point", shape = 20, size = 3) +
stat_summary(fun.data = function(x) data.frame(y = max(x) + 0.1,
label = length(x)),
geom = "text", aes(label = ..label..), vjust = 0.5) +
guides(fill = FALSE, color = FALSE) + theme_bw() + coord_flip()
ggsave(here("output", "figures", "cordi_NDMI.tiff"),
width = 21, height = 29.7, units = "cm", dpi = 300)
sessionInfo()
# Load necessary libraries
library(dplyr)
library(randomForest)
library(caret)
# Filter the data for training and testing sets
filtered_data <- db_resurv_RS_short %>%
filter(!is.na(NDVI) & !is.na(NDMI) &
EUNISa_1 %in% c("T", "R", "S", "Q", "N")) %>%
# Ensure EUNISa_1 is a factor and NDVI, NDMI are numeric
filtered_data <- filtered_data %>%
mutate(EUNISa_1 = as.factor(EUNISa_1),
NDVI = as.numeric(NDVI),
NDMI = as.numeric(NDMI))
train_data <- filtered_data %>%
filter(`Location method` %in%
c("Location with GPS", "Location with differential GPS"))
# Filter the data for training and testing sets
filtered_data <- db_resurv_RS_short %>%
filter(!is.na(NDVI) & !is.na(NDMI) &
EUNISa_1 %in% c("T", "R", "S", "Q", "N")) %>%
# Ensure EUNISa_1 is a factor and NDVI, NDMI are numeric
filtered_data <- filtered_data %>%
mutate(EUNISa_1 = as.factor(EUNISa_1),
NDVI = as.numeric(NDVI),
NDMI = as.numeric(NDMI))
# Filter the data for training and testing sets
filtered_data <- db_resurv_RS_short %>%
filter(!is.na(NDVI) & !is.na(NDMI) &
EUNISa_1 %in% c("T", "R", "S", "Q", "N")) %>%
# Ensure EUNISa_1 is a factor and NDVI, NDMI are numeric
mutate(EUNISa_1 = as.factor(EUNISa_1),
NDVI = as.numeric(NDVI),
NDMI = as.numeric(NDMI))
train_data <- filtered_data %>%
filter(`Location method` %in%
c("Location with GPS", "Location with differential GPS"))
test_data <- filtered_data %>%
filter(!(`Location method` %in%
c("Location with GPS", "Location with differential GPS")))
# Train the random forest model
set.seed(123)  # For reproducibility
rf_model <- randomForest(EUNISa_1 ~ NDVI + NDMI, data = train_data,
importance = TRUE, ntree = 500)
# Evaluate the model
predictions <- predict(rf_model, test_data)
conf_matrix <- confusionMatrix(predictions, test_data$EUNISa_1)
# Print the confusion matrix and model importance
print(conf_matrix)
print(importance(rf_model))
# Plot variable importance
varImpPlot(rf_model)
# Convert confusion matrix to a data frame
conf_matrix_df <- as.data.frame(conf_matrix$table)
colnames(conf_matrix_df) <- c("Prediction", "Reference", "Freq")
# Plot heatmap
ggplot(conf_matrix_df, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "black") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Confusion Matrix Heatmap", x = "Actual", y = "Predicted") +
theme_minimal()
# Calculate ROC curves for each class
roc_curves <- multiclass.roc(test_data$EUNISa_1, as.numeric(predictions))
# Plot ROC curves
plot(roc_curves, col = 1:length(levels(test_data$EUNISa_1)), main = "ROC Curves")
library(pROC)
# Calculate ROC curves for each class
roc_curves <- multiclass.roc(test_data$EUNISa_1, as.numeric(predictions))
# Plot ROC curves
plot(roc_curves, col = 1:length(levels(test_data$EUNISa_1)), main = "ROC Curves")
legend("bottomright", legend = levels(test_data$EUNISa_1), col = 1:length(levels(test_data$EUNISa_1)), lwd = 2)
# Convert predictions to a factor with the same levels as the actual data
predictions <- factor(predictions, levels = levels(test_data$EUNISa_1))
# Initialize a list to store ROC curves
roc_curves <- list()
# Calculate ROC curve for each class
for (class in levels(test_data$EUNISa_1)) {
roc_curves[[class]] <- roc(test_data$EUNISa_1 == class, as.numeric(predictions == class))
}
# Plot ROC curves
plot(roc_curves[[1]], col = 1, main = "ROC Curves")
for (i in 2:length(roc_curves)) {
plot(roc_curves[[i]], col = i, add = TRUE)
}
legend("bottomright", legend = levels(test_data$EUNISa_1), col = 1:length(roc_curves), lwd = 2)
install.packages("randomForestExplainer")
library(randomForestExplainer)
# Plot partial dependence for NDVI
partialPlot(rf_model, train_data, NDVI, main = "Partial Dependence of NDVI")
# Plot partial dependence for NDMI
partialPlot(rf_model, train_data, NDMI, main = "Partial Dependence of NDMI")
# Plot partial dependence for NDVI
partialPlot(rf_model, train_data, NDVI, main = "Partial Dependence of NDVI")
# Plot partial dependence for NDMI
partialPlot(rf_model, train_data, NDMI, main = "Partial Dependence of NDMI")
# Plot error rate
plot(rf_model, main = "Error Rate vs. Number of Trees")
legend("topright", legend = colnames(rf_model$err.rate), col = 1:3, lwd = 2)
# MDS plot
MDSplot(rf_model, train_data$EUNISa_1, main = "MDS Plot")
rf_model <- randomForest(EUNISa_1 ~ NDVI + NDMI, data = train_data,
importance = TRUE, ntree = 500, proximity = TRUE)
# Evaluate the model
predictions <- predict(rf_model, test_data)
conf_matrix <- confusionMatrix(predictions, test_data$EUNISa_1)
# Print the confusion matrix and model importance
print(conf_matrix)
print(importance(rf_model))
# Plot variable importance
varImpPlot(rf_model)
# Convert confusion matrix to a data frame
conf_matrix_df <- as.data.frame(conf_matrix$table)
colnames(conf_matrix_df) <- c("Prediction", "Reference", "Freq")
# Plot heatmap
ggplot(conf_matrix_df, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "black") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Confusion Matrix Heatmap", x = "Actual", y = "Predicted") +
theme_minimal()
# Convert predictions to a factor with the same levels as the actual data
predictions <- factor(predictions, levels = levels(test_data$EUNISa_1))
# Initialize a list to store ROC curves
roc_curves <- list()
# Calculate ROC curve for each class
for (class in levels(test_data$EUNISa_1)) {
roc_curves[[class]] <- roc(test_data$EUNISa_1 == class, as.numeric(predictions == class))
}
# Plot ROC curves
plot(roc_curves[[1]], col = 1, main = "ROC Curves")
for (i in 2:length(roc_curves)) {
plot(roc_curves[[i]], col = i, add = TRUE)
}
legend("bottomright", legend = levels(test_data$EUNISa_1), col = 1:length(roc_curves), lwd = 2)
# Plot error rate
plot(rf_model, main = "Error Rate vs. Number of Trees")
legend("topright", legend = colnames(rf_model$err.rate), col = 1:3, lwd = 2)
# MDS plot
MDSplot(rf_model, train_data$EUNISa_1, main = "MDS Plot")
# Print the confusion matrix and model importance
print(conf_matrix)
print(importance(rf_model))
library(devtools)
install.packages("devtools")
library(devtools)
install_github("Pakillo/CVtools")
?CVtools
library(CVtools)
?CVtools
